init_minelaying_countries_array = {
  clear_array = minelaying_countries

  add_to_array = { minelaying_countries = AST }
  add_to_array = { minelaying_countries = BRA }
  add_to_array = { minelaying_countries = DEN }
  add_to_array = { minelaying_countries = ENG }
  add_to_array = { minelaying_countries = FIN }
  add_to_array = { minelaying_countries = FRA }
  add_to_array = { minelaying_countries = GER }
  add_to_array = { minelaying_countries = GRE }
  add_to_array = { minelaying_countries = HOL }
  add_to_array = { minelaying_countries = ITA }
  add_to_array = { minelaying_countries = JAP }
  add_to_array = { minelaying_countries = NOR }
  add_to_array = { minelaying_countries = POL }
  add_to_array = { minelaying_countries = ROM }
  add_to_array = { minelaying_countries = SOV }
  add_to_array = { minelaying_countries = SPR }
  add_to_array = { minelaying_countries = USA }
  add_to_array = { minelaying_countries = YUG }
  add_to_array = { minelaying_countries = CAN }
  add_to_array = { minelaying_countries = CHI }
  add_to_array = { minelaying_countries = MEX }
  add_to_array = { minelaying_countries = SIA }
}

init_uk_dominions_array = {
  clear_array = uk_dominions

  add_to_array = { uk_dominions = CAN }
  add_to_array = { uk_dominions = RAJ }
  add_to_array = { uk_dominions = SAF }
  add_to_array = { uk_dominions = AST }
  add_to_array = { uk_dominions = NZL }
}

init_grind_countries = {
  clear_array = GLOBAL.grind_countries

  add_to_array = { GLOBAL.grind_countries = ETH }
  add_to_array = { GLOBAL.grind_countries = YUG }
  add_to_array = { GLOBAL.grind_countries = GRE }
  add_to_array = { GLOBAL.grind_countries = POR }
  add_to_array = { GLOBAL.grind_countries = FIN }
  add_to_array = { GLOBAL.grind_countries = AFG }
  add_to_array = { GLOBAL.grind_countries = PER }
  add_to_array = { GLOBAL.grind_countries = BUL }
  add_to_array = { GLOBAL.grind_countries = SWI }
  add_to_array = { GLOBAL.grind_countries = CHI }
}

add_faction_members_collaboration = {
  for_each_scope_loop = {
    array = faction_members

    if = {
      limit = {
        has_collaboration = {
          target = FROM
          value < 1.0
        }
      }

      add_collaboration = {
        target = FROM
        value = 0.2
      }
    }
  }
}

add_faction_members_collaboration_excellent = {
  for_each_scope_loop = {
    array = faction_members

    if = {
      limit = {
        has_collaboration = {
          target = FROM
          value < 1.0
        }
      }

      add_collaboration = {
        target = FROM
        value = 0.4
      }
    }
  }
}

nma_annex_country = {
  FROM = {
    every_controlled_state = {
      set_state_flag = marked_for_compliance
    }
  }
  PREV = {
    annex_country = { target = FROM transfer_troops = yes }
    every_controlled_state = {
      limit = {
        has_state_flag =  marked_for_compliance
      }
      set_compliance = 70
      clr_state_flag = marked_for_compliance
    }
  }
}

init_grinding_period = {
  # initializing array of allowed to grind countries
  init_grind_countries = yes
 
  # loop over these countries
  for_each_scope_loop = {
    array = GLOBAL.grind_countries
 
    # there are rules for grinding in months from 1 to 12
    for_loop_effect = {
      start = 1     # start
      end = 13      # less_than rule
      break = for_break
 
      # dirty hack to interpolate variables into a code
      meta_effect = {
 
        text = {
          if = {
            limit = {
              # checking game rule for THIS country if it has unlimited grinding period
              OR = {
                has_game_rule = {
                  rule = NMA_[CURRENT_TAG]_GRINDING
                  option = NMA_UNLIMITED_GRIND
                }
                NOT = { is_ai = yes }
              }
            }
 
            # setting unlimited grinding period (0)
            set_variable = { grinding_period = 0 }
 
            # breaking the loop, no need to overload CPU
            set_temp_variable = { for_break = 1 }
          }
          else = {
            # here we go again...
            # checking rule against current tag and current index
            if = {
              limit = {
                has_game_rule = {
                  rule = NMA_[CURRENT_TAG]_GRINDING
                  option = NMA_[INDEX]_MONTH_GRIND
                }
              }
 
              # you know, that one month has 30 days in average
              set_temp_variable = { month = 30 }
              multiply_temp_variable = { month = [INDEX] }
 
              # settings grinding period in days
              set_variable = { grinding_period = month }
 
              set_temp_variable = { for_break = 1 }
              # ground control to major Tom...
            }
          }
        }
 
        CURRENT_TAG = "[THIS.GetTag]"     # ETH, YUG, GRE etc.
        INDEX = v                         # [1, 12]
      }
    }
  }
 
  for_each_scope_loop = {
    array = GLOBAL.grind_countries
 
    log = "[THIS.GetNameDef] has grinding period [?grinding_period]"
  }
}

nma_disband_army = {
  every_owned_state = {
    OWNER = {
      delete_unit = {
        disband = yes
        state = PREV.id
      }
    }
  }
}

nma_share_compliance = {
  # sharing new member accumulated compliance among already existing faction members
  
  every_country = {
    limit = {
      var:GLOBAL.nma_faction_new_member = {
        has_collaboration = {
          target = PREV
          value > 0
        }
      }
    }

    set_temp_variable = { nma_collaboration_target = THIS }
    # THIS - country with an established collaboration government
    # PREV - new faction member

    var:GLOBAL.nma_faction_new_member = {
      # THIS - new faction member
      # PREV - country with an established collaboration government
      set_temp_variable = { nma_collaboration = has_collaboration@PREV }
      divide_temp_variable = { nma_collaboration = 2 }
    }

    every_country = {
      limit = {
        OR = {
          is_in_faction_with = GLOBAL.nma_faction_spymaster
          tag = GLOBAL.nma_faction_spymaster
        }
      }

      add_collaboration = {
        target = nma_collaboration_target
        value = nma_collaboration
      }
    }
  }
  
  # sharing spymaster's accumulated compliance with a new faction member

  every_country = {
    limit = {
      var:GLOBAL.nma_faction_spymaster = {
        has_collaboration = {
          target = PREV
          value > 0
        }
      }
    }

    var:GLOBAL.nma_faction_spymaster = {
      set_temp_variable = { spymaster_collaboration = has_collaboration@PREV }
    }

    var:GLOBAL.nma_faction_new_member = {
      set_temp_variable = { newcomer_collaboration = has_collaboration@PREV }
    }

    if = {
      limit = {
        check_variable = { spymaster_collaboration > newcomer_collaboration }
      }

      var:GLOBAL.nma_faction_new_member = {
        set_collaboration = {
          target = PREV
          value = spymaster_collaboration
        }
      }
    }
  }
}

nma_calculate_special_forces_limits = {
  # ALLOWED_SF_BATTALIONS_COUNT = (TOTAL_BATTALIONS_COUNT - SF_BATTALIONS_COUNT) * SPECIAL_FORCES_RATE
  # RESULT - SF_BATTALIONS_COUNT >= ALLOWED_SF_BATTALIONS_COUNT
  
  # NDefines.NCountry.SPECIAL_FORCES_CAP_MIN
  set_temp_variable = {
    special_forces_cap_min = 56
  }

  # Adding country SF cap modifier if exists
  add_to_temp_variable = {
    special_forces_cap_min = modifier@special_forces_min
  }

  # Base special forces battalion rate (5% of non-SF battalions)
  set_temp_variable = {
    special_forces_rate = 0.05
  }

  add_to_temp_variable = {
    special_forces_rate = modifier@special_forces_cap
  }

  # Getting number of all special forces battalions
  set_temp_variable = {
    special_forces_battions_count = num_battalions_with_type@amphibious_armor
  }
  add_to_temp_variable = {
    special_forces_battions_count = num_battalions_with_type@amphibious_mechanized
  }

  add_to_temp_variable = {
    special_forces_battions_count = num_battalions_with_type@mountaineers
  }
  add_to_temp_variable = {
    special_forces_battions_count = num_battalions_with_type@marine
  }
  add_to_temp_variable = {
    special_forces_battions_count = num_battalions_with_type@paratrooper
  }

  set_temp_variable = {
    total_battallions_count = num_battalions
  }

  set_temp_variable = {
    allowed_special_forces_battalions_count = total_battallions_count
  }

  subtract_from_temp_variable = {
    allowed_special_forces_battalions_count = special_forces_battions_count
  }

  multiply_temp_variable = {
    allowed_special_forces_battalions_count = special_forces_rate
  }

  if = {
    limit = {
      check_variable = {
        allowed_special_forces_battalions_count < special_forces_cap_min
      }
      set_temp_variable = {
        allowed_special_forces_battalions_count = special_forces_cap_min
      }
    }
  }

  set_variable = {
    nma_special_forces_battions_count = special_forces_battions_count
  }

  set_variable = {
    nma_allowed_special_forces_battalions_count = allowed_special_forces_battalions_count
  }

  set_variable = {
    nma_special_forces_check_date = global.date
  }
}